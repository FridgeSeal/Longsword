<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>libsystem_kernel.dylib`__exit (5 samples, 0.21%)</title><rect x="0.0000%" y="229" width="0.2073%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`read (10 samples, 0.41%)</title><rect x="0.2073%" y="197" width="0.4146%" height="15" fill="rgb(217,0,24)"/><text x="0.4573%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (1 samples, 0.04%)</title><rect x="0.6219%" y="197" width="0.0415%" height="15" fill="rgb(221,193,54)"/><text x="0.8719%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.04%)</title><rect x="0.6633%" y="197" width="0.0415%" height="15" fill="rgb(248,212,6)"/><text x="0.9133%" y="207.50"></text></g><g><title>longsword`&lt;unicode_segmentation::word::UnicodeWords as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.08%)</title><rect x="0.7048%" y="197" width="0.0829%" height="15" fill="rgb(208,68,35)"/><text x="0.9548%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.08%)</title><rect x="3.0680%" y="181" width="0.0829%" height="15" fill="rgb(232,128,0)"/><text x="3.3180%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.12%)</title><rect x="3.1509%" y="181" width="0.1244%" height="15" fill="rgb(207,160,47)"/><text x="3.4009%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.08%)</title><rect x="3.1924%" y="165" width="0.0829%" height="15" fill="rgb(228,23,34)"/><text x="3.4424%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.08%)</title><rect x="3.1924%" y="149" width="0.0829%" height="15" fill="rgb(218,30,26)"/><text x="3.4424%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.04%)</title><rect x="3.2753%" y="181" width="0.0415%" height="15" fill="rgb(220,122,19)"/><text x="3.5253%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (11 samples, 0.46%)</title><rect x="3.3167%" y="181" width="0.4561%" height="15" fill="rgb(250,228,42)"/><text x="3.5667%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (5 samples, 0.21%)</title><rect x="3.5655%" y="165" width="0.2073%" height="15" fill="rgb(240,193,28)"/><text x="3.8155%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (5 samples, 0.21%)</title><rect x="3.5655%" y="149" width="0.2073%" height="15" fill="rgb(216,20,37)"/><text x="3.8155%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (2 samples, 0.08%)</title><rect x="4.3532%" y="149" width="0.0829%" height="15" fill="rgb(206,188,39)"/><text x="4.6032%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (2 samples, 0.08%)</title><rect x="4.3532%" y="133" width="0.0829%" height="15" fill="rgb(217,207,13)"/><text x="4.6032%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (13 samples, 0.54%)</title><rect x="4.4362%" y="149" width="0.5390%" height="15" fill="rgb(231,73,38)"/><text x="4.6862%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (11 samples, 0.46%)</title><rect x="4.9751%" y="149" width="0.4561%" height="15" fill="rgb(225,20,46)"/><text x="5.2251%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (2 samples, 0.08%)</title><rect x="5.4312%" y="149" width="0.0829%" height="15" fill="rgb(210,31,41)"/><text x="5.6812%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.08%)</title><rect x="5.4312%" y="133" width="0.0829%" height="15" fill="rgb(221,200,47)"/><text x="5.6812%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.12%)</title><rect x="5.5141%" y="133" width="0.1244%" height="15" fill="rgb(226,26,5)"/><text x="5.7641%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (46 samples, 1.91%)</title><rect x="3.7728%" y="181" width="1.9071%" height="15" fill="rgb(249,33,26)"/><text x="4.0228%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (39 samples, 1.62%)</title><rect x="4.0630%" y="165" width="1.6169%" height="15" fill="rgb(235,183,28)"/><text x="4.3130%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (4 samples, 0.17%)</title><rect x="5.5141%" y="149" width="0.1658%" height="15" fill="rgb(221,5,38)"/><text x="5.7641%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`mvm_madvise_free (1 samples, 0.04%)</title><rect x="5.6385%" y="133" width="0.0415%" height="15" fill="rgb(247,18,42)"/><text x="5.8885%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (19 samples, 0.79%)</title><rect x="5.6799%" y="181" width="0.7877%" height="15" fill="rgb(241,131,45)"/><text x="5.9299%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.04%)</title><rect x="6.4677%" y="181" width="0.0415%" height="15" fill="rgb(249,31,29)"/><text x="6.7177%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (4 samples, 0.17%)</title><rect x="6.6335%" y="165" width="0.1658%" height="15" fill="rgb(225,111,53)"/><text x="6.8835%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.04%)</title><rect x="6.7993%" y="165" width="0.0415%" height="15" fill="rgb(238,160,17)"/><text x="7.0493%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (2 samples, 0.08%)</title><rect x="6.8408%" y="165" width="0.0829%" height="15" fill="rgb(214,148,48)"/><text x="7.0908%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (3 samples, 0.12%)</title><rect x="6.9237%" y="165" width="0.1244%" height="15" fill="rgb(232,36,49)"/><text x="7.1737%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (6 samples, 0.25%)</title><rect x="7.0481%" y="165" width="0.2488%" height="15" fill="rgb(209,103,24)"/><text x="7.2981%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (4 samples, 0.17%)</title><rect x="17.1227%" y="101" width="0.1658%" height="15" fill="rgb(229,88,8)"/><text x="17.3727%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.04%)</title><rect x="17.2886%" y="101" width="0.0415%" height="15" fill="rgb(213,181,19)"/><text x="17.5386%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (110 samples, 4.56%)</title><rect x="13.8889%" y="149" width="4.5605%" height="15" fill="rgb(254,191,54)"/><text x="14.1389%" y="159.50">libsy..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (102 samples, 4.23%)</title><rect x="14.2206%" y="133" width="4.2289%" height="15" fill="rgb(241,83,37)"/><text x="14.4706%" y="143.50">libsy..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (94 samples, 3.90%)</title><rect x="14.5522%" y="117" width="3.8972%" height="15" fill="rgb(233,36,39)"/><text x="14.8022%" y="127.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (27 samples, 1.12%)</title><rect x="17.3300%" y="101" width="1.1194%" height="15" fill="rgb(226,3,54)"/><text x="17.5800%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (8 samples, 0.33%)</title><rect x="18.1177%" y="85" width="0.3317%" height="15" fill="rgb(245,192,40)"/><text x="18.3677%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.08%)</title><rect x="18.4494%" y="149" width="0.0829%" height="15" fill="rgb(238,167,29)"/><text x="18.6994%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (48 samples, 1.99%)</title><rect x="18.5323%" y="149" width="1.9900%" height="15" fill="rgb(232,182,51)"/><text x="18.7823%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_size (37 samples, 1.53%)</title><rect x="18.9884%" y="133" width="1.5340%" height="15" fill="rgb(231,60,39)"/><text x="19.2384%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (34 samples, 1.41%)</title><rect x="19.1128%" y="117" width="1.4096%" height="15" fill="rgb(208,69,12)"/><text x="19.3628%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.04%)</title><rect x="22.0978%" y="133" width="0.0415%" height="15" fill="rgb(235,93,37)"/><text x="22.3478%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (31 samples, 1.29%)</title><rect x="23.3002%" y="117" width="1.2852%" height="15" fill="rgb(213,116,39)"/><text x="23.5502%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (99 samples, 4.10%)</title><rect x="20.5224%" y="149" width="4.1045%" height="15" fill="rgb(222,207,29)"/><text x="20.7724%" y="159.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (60 samples, 2.49%)</title><rect x="22.1393%" y="133" width="2.4876%" height="15" fill="rgb(206,96,30)"/><text x="22.3893%" y="143.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.04%)</title><rect x="24.5854%" y="117" width="0.0415%" height="15" fill="rgb(218,138,4)"/><text x="24.8354%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.04%)</title><rect x="24.6269%" y="149" width="0.0415%" height="15" fill="rgb(250,191,14)"/><text x="24.8769%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.04%)</title><rect x="24.6683%" y="149" width="0.0415%" height="15" fill="rgb(239,60,40)"/><text x="24.9183%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (42 samples, 1.74%)</title><rect x="24.7098%" y="149" width="1.7413%" height="15" fill="rgb(206,27,48)"/><text x="24.9598%" y="159.50"></text></g><g><title>longsword`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (469 samples, 19.44%)</title><rect x="7.2968%" y="165" width="19.4444%" height="15" fill="rgb(225,35,8)"/><text x="7.5468%" y="175.50">longsword`&lt;core::iter::adapter..</text></g><g><title>longsword`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.29%)</title><rect x="26.4511%" y="149" width="0.2902%" height="15" fill="rgb(250,213,24)"/><text x="26.7011%" y="159.50"></text></g><g><title>longsword`&lt;simplelog::loggers::termlog::TermLogger as log::Log&gt;::log (1 samples, 0.04%)</title><rect x="26.7413%" y="165" width="0.0415%" height="15" fill="rgb(247,123,22)"/><text x="26.9913%" y="175.50"></text></g><g><title>longsword`simplelog::loggers::termlog::TermLogger::try_log_term (1 samples, 0.04%)</title><rect x="26.7413%" y="149" width="0.0415%" height="15" fill="rgb(231,138,38)"/><text x="26.9913%" y="159.50"></text></g><g><title>longsword`std::io::Write::write_fmt (1 samples, 0.04%)</title><rect x="26.7413%" y="133" width="0.0415%" height="15" fill="rgb(231,145,46)"/><text x="26.9913%" y="143.50"></text></g><g><title>longsword`core::fmt::write (1 samples, 0.04%)</title><rect x="26.7413%" y="117" width="0.0415%" height="15" fill="rgb(251,118,11)"/><text x="26.9913%" y="127.50"></text></g><g><title>longsword`&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.04%)</title><rect x="26.7413%" y="101" width="0.0415%" height="15" fill="rgb(217,147,25)"/><text x="26.9913%" y="111.50"></text></g><g><title>longsword`std::io::Write::write_all (1 samples, 0.04%)</title><rect x="26.7413%" y="85" width="0.0415%" height="15" fill="rgb(247,81,37)"/><text x="26.9913%" y="95.50"></text></g><g><title>longsword`&lt;termcolor::StandardStream as std::io::Write&gt;::write (1 samples, 0.04%)</title><rect x="26.7413%" y="69" width="0.0415%" height="15" fill="rgb(209,12,38)"/><text x="26.9913%" y="79.50"></text></g><g><title>longsword`&lt;std::io::stdio::Stdout as std::io::Write&gt;::write (1 samples, 0.04%)</title><rect x="26.7413%" y="53" width="0.0415%" height="15" fill="rgb(227,1,9)"/><text x="26.9913%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`write (1 samples, 0.04%)</title><rect x="26.7413%" y="37" width="0.0415%" height="15" fill="rgb(248,47,43)"/><text x="26.9913%" y="47.50"></text></g><g><title>longsword`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.04%)</title><rect x="26.7828%" y="165" width="0.0415%" height="15" fill="rgb(221,10,30)"/><text x="27.0328%" y="175.50"></text></g><g><title>longsword`DYLD-STUB$$memcpy (1 samples, 0.04%)</title><rect x="26.8242%" y="165" width="0.0415%" height="15" fill="rgb(210,229,1)"/><text x="27.0742%" y="175.50"></text></g><g><title>longsword`&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (494 samples, 20.48%)</title><rect x="6.5091%" y="181" width="20.4809%" height="15" fill="rgb(222,148,37)"/><text x="6.7591%" y="191.50">longsword`&lt;core::iter::adapters:..</text></g><g><title>longsword`alloc::raw_vec::finish_grow (3 samples, 0.12%)</title><rect x="26.8657%" y="165" width="0.1244%" height="15" fill="rgb(234,67,33)"/><text x="27.1157%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (3 samples, 0.12%)</title><rect x="26.8657%" y="149" width="0.1244%" height="15" fill="rgb(247,98,35)"/><text x="27.1157%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (3 samples, 0.12%)</title><rect x="26.8657%" y="133" width="0.1244%" height="15" fill="rgb(247,138,52)"/><text x="27.1157%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (3 samples, 0.12%)</title><rect x="26.8657%" y="117" width="0.1244%" height="15" fill="rgb(213,79,30)"/><text x="27.1157%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.12%)</title><rect x="26.8657%" y="101" width="0.1244%" height="15" fill="rgb(246,177,23)"/><text x="27.1157%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.37%)</title><rect x="28.0265%" y="165" width="0.3731%" height="15" fill="rgb(230,62,27)"/><text x="28.2765%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 0.37%)</title><rect x="28.0265%" y="149" width="0.3731%" height="15" fill="rgb(216,154,8)"/><text x="28.2765%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (8 samples, 0.33%)</title><rect x="28.0680%" y="133" width="0.3317%" height="15" fill="rgb(244,35,45)"/><text x="28.3180%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (5 samples, 0.21%)</title><rect x="28.1924%" y="117" width="0.2073%" height="15" fill="rgb(251,115,12)"/><text x="28.4424%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (2 samples, 0.08%)</title><rect x="28.3997%" y="165" width="0.0829%" height="15" fill="rgb(240,54,50)"/><text x="28.6497%" y="175.50"></text></g><g><title>longsword`&lt;unicode_segmentation::sentence::fwd::SentenceBreaks as core::iter::traits::iterator::Iterator&gt;::next (506 samples, 20.98%)</title><rect x="28.4826%" y="165" width="20.9784%" height="15" fill="rgb(233,84,52)"/><text x="28.7326%" y="175.50">longsword`&lt;unicode_segmentation::..</text></g><g><title>longsword`unicode_segmentation::tables::sentence::sentence_category (338 samples, 14.01%)</title><rect x="35.4478%" y="149" width="14.0133%" height="15" fill="rgb(207,117,47)"/><text x="35.6978%" y="159.50">longsword`unicode_seg..</text></g><g><title>longsword`unicode_segmentation::tables::util::is_alphanumeric (2 samples, 0.08%)</title><rect x="53.7728%" y="149" width="0.0829%" height="15" fill="rgb(249,43,39)"/><text x="54.0228%" y="159.50"></text></g><g><title>longsword`unicode_segmentation::tables::word::word_category (242 samples, 10.03%)</title><rect x="53.8557%" y="149" width="10.0332%" height="15" fill="rgb(209,38,44)"/><text x="54.1057%" y="159.50">longsword`unico..</text></g><g><title>longsword`unicode_segmentation::word::UWordBounds::get_next_cat (13 samples, 0.54%)</title><rect x="63.8889%" y="149" width="0.5390%" height="15" fill="rgb(236,212,23)"/><text x="64.1389%" y="159.50"></text></g><g><title>longsword`unicode_segmentation::tables::word::word_category (12 samples, 0.50%)</title><rect x="63.9303%" y="133" width="0.4975%" height="15" fill="rgb(242,79,21)"/><text x="64.1803%" y="143.50"></text></g><g><title>longsword`&lt;unicode_segmentation::word::UnicodeWords as core::iter::traits::iterator::Iterator&gt;::next (378 samples, 15.67%)</title><rect x="49.4610%" y="165" width="15.6716%" height="15" fill="rgb(211,96,35)"/><text x="49.7110%" y="175.50">longsword`&lt;unicode_segme..</text></g><g><title>longsword`unicode_segmentation::word::new_unicode_words::has_alphanumeric (17 samples, 0.70%)</title><rect x="64.4279%" y="149" width="0.7048%" height="15" fill="rgb(253,215,40)"/><text x="64.6779%" y="159.50"></text></g><g><title>longsword`unicode_segmentation::tables::util::is_alphanumeric (1 samples, 0.04%)</title><rect x="65.0912%" y="133" width="0.0415%" height="15" fill="rgb(211,81,21)"/><text x="65.3412%" y="143.50"></text></g><g><title>longsword`DYLD-STUB$$realloc (1 samples, 0.04%)</title><rect x="65.1327%" y="165" width="0.0415%" height="15" fill="rgb(208,190,38)"/><text x="65.3827%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.04%)</title><rect x="65.1741%" y="149" width="0.0415%" height="15" fill="rgb(235,213,38)"/><text x="65.4241%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (1 samples, 0.04%)</title><rect x="65.3400%" y="133" width="0.0415%" height="15" fill="rgb(237,122,38)"/><text x="65.5900%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.04%)</title><rect x="65.5473%" y="101" width="0.0415%" height="15" fill="rgb(244,218,35)"/><text x="65.7973%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.04%)</title><rect x="65.5473%" y="85" width="0.0415%" height="15" fill="rgb(240,68,47)"/><text x="65.7973%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (22 samples, 0.91%)</title><rect x="65.3814%" y="133" width="0.9121%" height="15" fill="rgb(210,16,53)"/><text x="65.6314%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (19 samples, 0.79%)</title><rect x="65.5058%" y="117" width="0.7877%" height="15" fill="rgb(235,124,12)"/><text x="65.7558%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (17 samples, 0.70%)</title><rect x="65.5887%" y="101" width="0.7048%" height="15" fill="rgb(224,169,11)"/><text x="65.8387%" y="111.50"></text></g><g><title>longsword`alloc::raw_vec::finish_grow (30 samples, 1.24%)</title><rect x="65.1741%" y="165" width="1.2438%" height="15" fill="rgb(250,166,2)"/><text x="65.4241%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (29 samples, 1.20%)</title><rect x="65.2156%" y="149" width="1.2023%" height="15" fill="rgb(242,216,29)"/><text x="65.4656%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.12%)</title><rect x="66.2935%" y="133" width="0.1244%" height="15" fill="rgb(230,116,27)"/><text x="66.5435%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (3 samples, 0.12%)</title><rect x="66.2935%" y="117" width="0.1244%" height="15" fill="rgb(228,99,48)"/><text x="66.5435%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (15 samples, 0.62%)</title><rect x="70.2322%" y="149" width="0.6219%" height="15" fill="rgb(253,11,6)"/><text x="70.4822%" y="159.50"></text></g><g><title>longsword`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (119 samples, 4.93%)</title><rect x="66.4179%" y="165" width="4.9337%" height="15" fill="rgb(247,143,39)"/><text x="66.6679%" y="175.50">longsw..</text></g><g><title>longsword`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (12 samples, 0.50%)</title><rect x="70.8541%" y="149" width="0.4975%" height="15" fill="rgb(236,97,10)"/><text x="71.1041%" y="159.50"></text></g><g><title>longsword`unicode_segmentation::tables::sentence::sentence_category (4 samples, 0.17%)</title><rect x="71.3516%" y="165" width="0.1658%" height="15" fill="rgb(233,208,19)"/><text x="71.6016%" y="175.50"></text></g><g><title>longsword`unicode_segmentation::tables::word::word_category (5 samples, 0.21%)</title><rect x="71.5174%" y="165" width="0.2073%" height="15" fill="rgb(216,164,2)"/><text x="71.7674%" y="175.50"></text></g><g><title>longsword`unicode_segmentation::word::UWordBounds::get_next_cat (2 samples, 0.08%)</title><rect x="71.7247%" y="165" width="0.0829%" height="15" fill="rgb(220,129,5)"/><text x="71.9747%" y="175.50"></text></g><g><title>longsword`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,084 samples, 44.94%)</title><rect x="26.9900%" y="181" width="44.9420%" height="15" fill="rgb(242,17,10)"/><text x="27.2400%" y="191.50">longsword`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iter..</text></g><g><title>longsword`unicode_segmentation::word::new_unicode_words::has_alphanumeric (3 samples, 0.12%)</title><rect x="71.8076%" y="165" width="0.1244%" height="15" fill="rgb(242,107,0)"/><text x="72.0576%" y="175.50"></text></g><g><title>longsword`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.04%)</title><rect x="71.9320%" y="181" width="0.0415%" height="15" fill="rgb(251,28,31)"/><text x="72.1820%" y="191.50"></text></g><g><title>longsword`unicode_segmentation::tables::util::is_alphanumeric (4 samples, 0.17%)</title><rect x="76.0779%" y="165" width="0.1658%" height="15" fill="rgb(233,223,10)"/><text x="76.3279%" y="175.50"></text></g><g><title>longsword`unicode_segmentation::tables::word::word_category (268 samples, 11.11%)</title><rect x="76.2438%" y="165" width="11.1111%" height="15" fill="rgb(215,21,27)"/><text x="76.4938%" y="175.50">longsword`unicod..</text></g><g><title>longsword`unicode_segmentation::word::UWordBounds::get_next_cat (14 samples, 0.58%)</title><rect x="87.3549%" y="165" width="0.5804%" height="15" fill="rgb(232,23,21)"/><text x="87.6049%" y="175.50"></text></g><g><title>longsword`unicode_segmentation::tables::word::word_category (12 samples, 0.50%)</title><rect x="87.4378%" y="149" width="0.4975%" height="15" fill="rgb(244,5,23)"/><text x="87.6878%" y="159.50"></text></g><g><title>longsword`&lt;unicode_segmentation::word::UnicodeWords as core::iter::traits::iterator::Iterator&gt;::next (397 samples, 16.46%)</title><rect x="71.9735%" y="181" width="16.4594%" height="15" fill="rgb(226,81,46)"/><text x="72.2235%" y="191.50">longsword`&lt;unicode_segmen..</text></g><g><title>longsword`unicode_segmentation::word::new_unicode_words::has_alphanumeric (12 samples, 0.50%)</title><rect x="87.9353%" y="165" width="0.4975%" height="15" fill="rgb(247,70,30)"/><text x="88.1853%" y="175.50"></text></g><g><title>longsword`unicode_segmentation::tables::util::is_alphanumeric (5 samples, 0.21%)</title><rect x="88.2255%" y="149" width="0.2073%" height="15" fill="rgb(212,68,19)"/><text x="88.4755%" y="159.50"></text></g><g><title>longsword`alloc::raw_vec::finish_grow (2 samples, 0.08%)</title><rect x="88.4328%" y="181" width="0.0829%" height="15" fill="rgb(240,187,13)"/><text x="88.6828%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2 samples, 0.08%)</title><rect x="88.4328%" y="165" width="0.0829%" height="15" fill="rgb(223,113,26)"/><text x="88.6828%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2 samples, 0.08%)</title><rect x="88.4328%" y="149" width="0.0829%" height="15" fill="rgb(206,192,2)"/><text x="88.6828%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2 samples, 0.08%)</title><rect x="88.4328%" y="133" width="0.0829%" height="15" fill="rgb(241,108,4)"/><text x="88.6828%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.08%)</title><rect x="88.4328%" y="117" width="0.0829%" height="15" fill="rgb(247,173,49)"/><text x="88.6828%" y="127.50"></text></g><g><title>longsword`alloc::str::_&lt;impl str&gt;::to_lowercase (222 samples, 9.20%)</title><rect x="88.5158%" y="181" width="9.2040%" height="15" fill="rgb(224,114,35)"/><text x="88.7658%" y="191.50">longsword`all..</text></g><g><title>longsword`alloc::string::String::push (33 samples, 1.37%)</title><rect x="96.3516%" y="165" width="1.3682%" height="15" fill="rgb(245,159,27)"/><text x="96.6016%" y="175.50"></text></g><g><title>longsword`alloc::string::String::push (3 samples, 0.12%)</title><rect x="97.7197%" y="181" width="0.1244%" height="15" fill="rgb(245,172,44)"/><text x="97.9697%" y="191.50"></text></g><g><title>longsword`config::config::Config::refresh (1 samples, 0.04%)</title><rect x="97.8441%" y="181" width="0.0415%" height="15" fill="rgb(236,23,11)"/><text x="98.0941%" y="191.50"></text></g><g><title>longsword`config::source::Source::collect_to (1 samples, 0.04%)</title><rect x="97.8441%" y="165" width="0.0415%" height="15" fill="rgb(205,117,38)"/><text x="98.0941%" y="175.50"></text></g><g><title>longsword`&lt;config::file::File&lt;T&gt; as config::source::Source&gt;::collect (1 samples, 0.04%)</title><rect x="97.8441%" y="149" width="0.0415%" height="15" fill="rgb(237,72,25)"/><text x="98.0941%" y="159.50"></text></g><g><title>longsword`std::env::current_dir (1 samples, 0.04%)</title><rect x="97.8441%" y="133" width="0.0415%" height="15" fill="rgb(244,70,9)"/><text x="98.0941%" y="143.50"></text></g><g><title>libsystem_c.dylib`__private_getcwd (1 samples, 0.04%)</title><rect x="97.8441%" y="117" width="0.0415%" height="15" fill="rgb(217,125,39)"/><text x="98.0941%" y="127.50"></text></g><g><title>libsystem_c.dylib`__getcwd (1 samples, 0.04%)</title><rect x="97.8441%" y="101" width="0.0415%" height="15" fill="rgb(235,36,10)"/><text x="98.0941%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__open_nocancel (1 samples, 0.04%)</title><rect x="97.8441%" y="85" width="0.0415%" height="15" fill="rgb(251,123,47)"/><text x="98.0941%" y="95.50"></text></g><g><title>longsword`core::str::converts::from_utf8 (2 samples, 0.08%)</title><rect x="97.8856%" y="181" width="0.0829%" height="15" fill="rgb(221,13,13)"/><text x="98.1356%" y="191.50"></text></g><g><title>longsword`hashbrown::map::make_hash (39 samples, 1.62%)</title><rect x="97.9685%" y="181" width="1.6169%" height="15" fill="rgb(238,131,9)"/><text x="98.2185%" y="191.50"></text></g><g><title>longsword`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (15 samples, 0.62%)</title><rect x="98.9635%" y="165" width="0.6219%" height="15" fill="rgb(211,50,8)"/><text x="99.2135%" y="175.50"></text></g><g><title>longsword`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (6 samples, 0.25%)</title><rect x="99.5854%" y="181" width="0.2488%" height="15" fill="rgb(245,182,24)"/><text x="99.8354%" y="191.50"></text></g><g><title>longsword`hashbrown::map::make_hash (3 samples, 0.12%)</title><rect x="99.7098%" y="165" width="0.1244%" height="15" fill="rgb(242,14,37)"/><text x="99.9598%" y="175.50"></text></g><g><title>longsword`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.08%)</title><rect x="99.7512%" y="149" width="0.0829%" height="15" fill="rgb(246,228,12)"/><text x="100.0012%" y="159.50"></text></g><g><title>longsword`unicode_segmentation::tables::word::word_category (1 samples, 0.04%)</title><rect x="99.8342%" y="181" width="0.0415%" height="15" fill="rgb(213,55,15)"/><text x="100.0842%" y="191.50"></text></g><g><title>all (2,412 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(209,9,3)"/><text x="0.2500%" y="287.50"></text></g><g><title>0x1 (2,412 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(230,59,30)"/><text x="0.2500%" y="271.50">0x1</text></g><g><title>libdyld.dylib`start (2,412 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(209,121,21)"/><text x="0.2500%" y="255.50">libdyld.dylib`start</text></g><g><title>longsword`main (2,407 samples, 99.79%)</title><rect x="0.2073%" y="229" width="99.7927%" height="15" fill="rgb(220,109,13)"/><text x="0.4573%" y="239.50">longsword`main</text></g><g><title>longsword`std::sys_common::backtrace::__rust_begin_short_backtrace (2,407 samples, 99.79%)</title><rect x="0.2073%" y="213" width="99.7927%" height="15" fill="rgb(232,18,1)"/><text x="0.4573%" y="223.50">longsword`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>longsword`longsword::main (2,393 samples, 99.21%)</title><rect x="0.7877%" y="197" width="99.2123%" height="15" fill="rgb(215,41,42)"/><text x="1.0377%" y="207.50">longsword`longsword::main</text></g><g><title>longsword`unicode_segmentation::word::new_unicode_words::has_alphanumeric (3 samples, 0.12%)</title><rect x="99.8756%" y="181" width="0.1244%" height="15" fill="rgb(224,123,36)"/><text x="100.1256%" y="191.50"></text></g></svg></svg>